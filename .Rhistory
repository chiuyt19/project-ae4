<<<<<<< f0ea3843110546b3d7e484ecd023fae04b29e7de
=======
```
```{r}
```
View(all.data)
View(committee.data)
View(all.data)
View(legislator.res)
committee.data2<-committee.data %>% filter(subcommittee==FALSE)
View(committee.data2)
selected.committe<-committee.data2[1,]
View(selected.committe)
committee.id<-committee.data2$committee_id[1]
committee.member.resource <-"/committees?committee_id=SSAP&fields=members"
committee.member.url <- paste0(base.url,"/committees?committee_id=",committee.id,"&fields=members")
committee.member.response <- GET(committee.member.url)
body <- fromJSON(content(committee.member.response,"text"))$results$members[[1]] %>% flatten()
View(body)
chair<-body %>% filter(title=="Chair") %>% select(legislator.first_name, legislator.last_name)
chair
total.memeber<- body %>% count()
total.memeber
committee.rep<-committee.data2$member_id[1]
rep.side<-body %>% filter(legislator.bioguide_id)
rep.side<-body %>% filter(legislator.bioguide_id==committee.rep)
View(rep.side)
rep.side<-body %>% filter(legislator.bioguide_id==committee.rep) %>% select(side)
View(rep.side)
View(all.data)
gender<-body %>% group_by(legislator.gender)
View(gender)
gender<-body %>% group_by(legislator.gender) %>% summarise(count=n())
View(gender)
male.dist<-gender[legislator.gender=='M']/total.memeber
male.dist<-gender$legislator.gender='M'/total.memeber
male.dist<-gender %>% filter(legislator.gender=='M')/total.memeber
gender$count[legislator.gender]
gender$legislator.gender
gender$legislator.gender="M"
gender['M','count']
gender<-body %>% group_by(legislator.gender) %>% summarise(count=n())
gender$legislator.gender['M',count]
gender$legislator.gender['M','count']
gender['M','count']
gender[1,2]
gender[legislator.gender='M',2]
gender[legislator.gender=='M',2]
gender['M',2]
gender[gender$legislator.gender == M]
gender[gender$legislator.gender == "M"]
gender[gender$legislator.gender == "M",]
gender[gender$legislator.gender == "M",'count']
total.member<- body %>% count()
chair<-body %>% filter(title=="Chair") %>% select(legislator.first_name, legislator.last_name)
total.member<- body %>% count()
rep.side<-body %>% filter(legislator.bioguide_id==committee.rep) %>% select(side)
male.dist<- round((gender[gender$legislator.gender == "M",'count']/total.member),2)
female.dist<-round((gender[gender$legislator.gender == "F",'count']/total.member),2)
gender<- body %>% group_by(legislator.gender) %>% summarise(count=n())
#convert the gender protion to percentage
none.subcommittee.data<-committee.data %>% filter(subcommittee==FALSE)
committee.id<-none.subcommittee.data$committee_id[1]
committee.rep<-none.subcommittee.data$member_id[1]
getAPI<-function(source,var){
base.url <-"https://congress.api.sunlightfoundation.com"
url.full<-paste0(base.url,source,var)
res<-GET(url.full)
final<-fromJSON(content(res,"text"))$results %>% flatten()
return(final)
}
yo<-getAPI("/districts/locate?zip=","98105")
View(yo)
yo2<-getAPI("/legislators/locate?zip=","98105")
View(yo2)
View(legislator.res)
hello<-getAPI("/committees?member_ids=",id.list)
zip<-"98105"
district.data<-getAPI("/districts/locate?zip=",zip)
district.num<-district.data$district
district.num
base.url <-"https://congress.api.sunlightfoundation.com"
com<-function(ids){
getAPI("/committees?member_ids=",ids)
}
getAPI("/committees?member_ids=",id.list)
base.url <-"https://congress.api.sunlightfoundation.com"
#reduce the redundancy of getting APIs for many times, so write it as a function
getAPI<-function(resource,var){
url.full<-paste0(base.url,resource,var)
res<-GET(url.full)
final<-fromJSON(content(res,"text"))$results %>% flatten()
return(final)
}
View(none.subcommittee.data)
cereal<-read.csv("/Users/CindyChiu/info201/a8-building-apps-chiuyt19/data/cereal.tsv",sep="\t",stringsAsFactors = FALSE,na.strings = "-1" )
library(ggplot2)
library(plotly)
BuildScatter(cereal,"fat","calories","mfr")
p<-ggplot(cereal,aes(x=fat,y=calories,color=mfr))+geom_point(na.rm=FALSE)+geom_count()
p<-ggplotly(p)
p
BuildScatter<-function(data,scatter.x,scatter.y,scatter.color){
p<-ggplot(data,aes_string(x=scatter.x,y=scatter.y,color=scatter.color))+geom_point(na.rm=FALSE)+geom_count()
p<-ggplotly(p)
return(p)
}
BuildScatter(cereal,"fat","calories","mfr")
shiny::runApp('info201/a8-building-apps-chiuyt19')
ggplot(cereal,aes(x=fat,y=calories,color=mfr))+geom_point(na.rm=FALSE)+geom_count()+ylim(100,160)
ggplot(cereal,aes(x=fat,y=calories,color=mfr))+geom_point(na.rm=FALSE)+geom_count()+ylim(0,160)
p<-ggplotly(p)
ggplot(cereal,aes(x=fat,y=calories,color=mfr))+geom_point(na.rm=FALSE)+geom_count()+ylim(0,100)
ggplot(cereal,aes(x=fat,y=calories,color=mfr))+geom_point(na.rm=FALSE)+geom_count()+ylim(0,160)
p<-ggplotly(p)
p<-ggplot(cereal,aes(x=fat,y=calories,color=mfr))+geom_point(na.rm=FALSE)+geom_count()+ylim(0,160)
p<-ggplotly(p)
p
BuildScatter<-function(data,scatter.x,scatter.y,scatter.color,max,min){
p<-ggplot(data,aes_string(x=scatter.x,y=scatter.y,color=scatter.color))+geom_point(na.rm=FALSE)+geom_count()+ylim(min,max)
p<-ggplotly(p)
return(p)
}
BuildScatter(cereal,"fat","calories","mfr",0,120)
BuildScatter<-function(data,scatter.x,scatter.y,scatter.color,min,max){
p<-ggplot(data,aes_string(x=scatter.x,y=scatter.y,color=scatter.color))+geom_point(na.rm=FALSE)+geom_count()+ylim(min,max)
p<-ggplotly(p)
return(p)
}
BuildScatter(cereal,"fat","calories","mfr",0,120)
View(cereal)
BuildScatter<-function(data,scatter.x,scatter.y,scatter.color,max){
p<-ggplot(data,aes_string(x=scatter.x,y=scatter.y,color=scatter.color))+geom_point(na.rm=FALSE)+geom_count()+ylim(0,max)
p<-ggplotly(p)
return(p)
}
BuildScatter(cereal,"fat","calories","mfr",120)
runApp('info201/a8-building-apps-chiuyt19')
runApp('info201/a8-building-apps-chiuyt19')
runApp('info201/a8-building-apps-chiuyt19')
input$slider
install.packages('rsconnect')
install.packages("rsconnect")
install.packages("rsconnect")
install.packages('rsconnect')
install.packages("dplyr")
install.packages("plotly")
install.packages("ggplot2")
install.packages("shiny")
library(jsonlite)
library(httr)
install.packages("janeaustenr")
install.packages("tidytext")
library(janeaustenr)
library(tidytext)
library(dplyr)
library(stringr)
library(ggplot2)
austen_books()
books<-austen_books()
View(books)
books %>% group_by(book) %>% summarise(count=n())
num.book<-books %>% group_by(book) %>% summarise(count=n())
View(num.book)
nrow(num.book)
most.line.book<-num.book %>% filter(count==max(count))
most.line.book
unnest_tokens(books)
unnest_tokens(books$text)
unnest_tokens(text)
unnest_tokens()
?unnest_tokens
unnest_tokens(books,words,text)
update<-unnest_tokens(books,words,text)
View(update)
most.common<-update %>% filter(words=max(words))
most.common<-update %>% filter(words==max(words))
most.common
most.common<-update %>% group_by(words) %>% filter(words==max(words))
most.common
most.common<-update %>% group_by(words) %>% summarise(count=n()) %>% filter(count==max(count))
most.common
View(stop_words)
?anti_join
no.stop<-anti_join(update,stop_words,by=c("words","word"))
no.stop<-anti_join(update,stop_words,by=c(words,word))
no.stop<-anti_join(update,stop_words,words,word))
no.stop<-anti_join(update,stop_words,words,word)
no.stop<-anti_join(update,stop_words,by=c("words"="word"))
View(no.stop)
most.common<-update %>% group_by(words) %>% summarise(count=n())
View(most.common)
most.common<-update %>% group_by(words) %>% summarise(count=n()) %>% filter(count==max(count))
View(most.common)
no.stop %>% group_by(words) %>% summarise(count=n()) %>% filter(count==max(count))
?geom_bar
ggplot(no.stop)+geom_bar(mapping=aes(x=words))
install.packages(rvest)
install.packages('rvest')
library(tidytext)
library(dplyr)
library(stringr)
library(ggplot2)
web<-read_html("https://www.washington.edu/students/crscat/info.html")
library(rvest)
web<-read_html("https://www.washington.edu/students/crscat/info.html")
title<-web %>% html_node('p b') %>% html_text()
des<-web %>% html_node('p') %>% html_text()
titles<-web %>% html_node('p b') %>% html_text()
classes <- data.frame(title = titles, description = des[2:length(des)], stringsAsFactors = FALSE)
View(classes)
# Extract descriptions of each course into a dataframe (may take multiple steps)
titles<-web %>% html_nodes('p b') %>% html_text()
des<-web %>% html_nodes('p') %>% html_text()
classes <- data.frame(title = titles, description = des[2:length(des)], stringsAsFactors = FALSE)
View(classes)
nrow(classes)
class.words<-unnest_tokens(classes,words,description)
View(class.words)
library(httr)
library(jsonlite)
setwd("~/info201/project-ae4")
getwd()
#find the artist id
base.uri <- "https://api.spotify.com"
ArtistID<-function(artist){
resource <- "/v1/search"
uri = paste0(base.uri, resource)
query.params <- list(q = artist, type = "artist")
response <- GET(uri, query = query.params)
artist.info <- fromJSON(content(response, "text"))
artist.id <- artist.info$artists$items$id[1]
return(artist.id)
}
#ArtistID("Beyonce")
#find the top track in certain country
CountryTopTrack<-function(id,my_country){
resource <- paste0("/v1/artists/", id,"/top-tracks")
uri = paste0(base.uri, resource)
query.params <- list(country=my_country)
response <- GET(uri, query = query.params)
top.tracks <- fromJSON(content(response, "text"))
return(top.tracks$tracks$name)
}
#ArtistID("Beyonce")
#CountryTopTrack("6vWDO969PvNqNYHIOW5v0m","GI")
#CountryTopTrack(ArtistID("Beyonce"),"US")
CountryTopTrack2<-function(id,my_country){
resource <- paste0("/v1/artists/", id,"/top-tracks")
uri = paste0(base.uri, resource)
query.params <- list(country=my_country)
response <- GET(uri, query = query.params)
top.tracks <- fromJSON(content(response, "text"))
return(top.tracks$tracks)
}
#at<-CountryTopTrack2(ArtistID("Beyonce"),"AT")
#us<-CountryTopTrack2(ArtistID("Beyonce"),"US")
#includes 1.track name 2.album  3.popularity(sort by this) 4.link to external spotify web page
shiny::runApp()
runApp()
library("ggplot2")
diamonds
runApp()
source("./scripts/artistTrack.R")
CountryTopTrack2<-function(id=ArtistID,my_country){
resource <- paste0("/v1/artists/", id,"/top-tracks")
uri = paste0(base.uri, resource)
query.params <- list(country=my_country)
response <- GET(uri, query = query.params)
top.tracks <- fromJSON(content(response, "text"))
return(top.tracks$tracks)
}
at<-CountryTopTrack2(ArtistID("Beyonce"),"AT")
at<-CountryTopTrack2("Beyonce","AT")
base.uri <- "https://api.spotify.com"
ArtistID<-function(artist){
resource <- "/v1/search"
uri = paste0(base.uri, resource)
query.params <- list(q = artist, type = "artist")
response <- GET(uri, query = query.params)
artist.info <- fromJSON(content(response, "text"))
artist.id <- artist.info$artists$items$id[1]
return(artist.id)
}
#ArtistID("Beyonce")
#find the top track in certain country
CountryTopTrack<-function(id,my_country){
resource <- paste0("/v1/artists/", id,"/top-tracks")
uri = paste0(base.uri, resource)
query.params <- list(country=my_country)
response <- GET(uri, query = query.params)
top.tracks <- fromJSON(content(response, "text"))
return(top.tracks$tracks$name)
}
CountryTopTrack2<-function(id=ArtistID,my_country){
resource <- paste0("/v1/artists/", id,"/top-tracks")
uri = paste0(base.uri, resource)
query.params <- list(country=my_country)
response <- GET(uri, query = query.params)
top.tracks <- fromJSON(content(response, "text"))
return(top.tracks$tracks)
}
at<-CountryTopTrack2("Beyonce","AT")
View(CountryTopTrack)
ArtistID("Beyonce")
library(httr)
library(jsonlite)
base.uri <- "https://api.spotify.com"
ArtistID<-function(artist){
resource <- "/v1/search"
uri = paste0(base.uri, resource)
query.params <- list(q = artist, type = "artist")
response <- GET(uri, query = query.params)
artist.info <- fromJSON(content(response, "text"))
artist.id <- artist.info$artists$items$id[1]
return(artist.id)
}
ArtistID("Beyonce")
CountryTopTrack<-function(id,my_country){
resource <- paste0("/v1/artists/", id,"/top-tracks")
uri = paste0(base.uri, resource)
query.params <- list(country=my_country)
response <- GET(uri, query = query.params)
top.tracks <- fromJSON(content(response, "text"))
return(top.tracks$tracks$name)
}
CountryTopTrack2<-function(id=ArtistID,my_country){
resource <- paste0("/v1/artists/", id,"/top-tracks")
uri = paste0(base.uri, resource)
query.params <- list(country=my_country)
response <- GET(uri, query = query.params)
top.tracks <- fromJSON(content(response, "text"))
return(top.tracks$tracks)
}
CountryTopTrack2("Beyonce","AT")
iddd<-ArtistID("Beyonce")
CountryTopTrack2<-function(id=iddd,my_country){
resource <- paste0("/v1/artists/", id,"/top-tracks")
uri = paste0(base.uri, resource)
query.params <- list(country=my_country)
response <- GET(uri, query = query.params)
top.tracks <- fromJSON(content(response, "text"))
return(top.tracks$tracks)
}
CountryTopTrack2("Beyonce","AT")
resource <- paste0("/v1/artists/", id,"/top-tracks")
resource <- paste0("/v1/artists/", iddd,"/top-tracks")
CountryTopTrack2("Beyonce","US")
uri = paste0(base.uri, resource)
query.params <- list(country=my_country)
query.params <- list(country="US")
response <- GET(uri, query = query.params)
top.tracks <- fromJSON(content(response, "text"))
top.tracks$tracks
df<-top.tracks$tracks
View(df)
artist.id<-ArtistID(input$text)
runApp()
runApp()
artist.id<-ArtistID("Beyonce")
runApp()
runApp()
runApp()
CountryTopTrack2("Beyonce","US")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
is.data.frame(df)
df
library(dplyr)
View(df)
df<- df %>% select(name,popularity)
View(df)
runApp()
runApp()
runApp()
input$text
runApp()
runApp()
runApp()
install.packages("DT")
runApp()
runApp()
library("dplyr")
df<- df %>% select(name,popularity)
runApp()
artist.id<-ArtistID("Beyonce")
df<-CountryTopTrack2(artist.id, "US")
#CountryTopTrack2("Beyonce","US")
artist.id<-ArtistID("Beyonce")
ArtistID("Beyonce")
base.uri <- "https://api.spotify.com"
ArtistID<-function(artist){
resource <- "/v1/search"
uri = paste0(base.uri, resource)
query.params <- list(q = artist, type = "artist")
response <- GET(uri, query = query.params)
artist.info <- fromJSON(content(response, "text"))
artist.id <- artist.info$artists$items$id[1]
return(artist.id)
}
ArtistID("Beyonce")
library(httr)
library(jsonlite)
base.uri <- "https://api.spotify.com"
ArtistID<-function(artist){
resource <- "/v1/search"
uri = paste0(base.uri, resource)
query.params <- list(q = artist, type = "artist")
response <- GET(uri, query = query.params)
artist.info <- fromJSON(content(response, "text"))
artist.id <- artist.info$artists$items$id[1]
return(artist.id)
}
ArtistID("Beyonce")
ArtistID("Beyonce")
resource <- "/v1/search"
uri = paste0(base.uri, resource)
query.params <- list(q = artist, type = "artist")
query.params <- list(q = "Beyonce", type = "artist")
artist.info <- fromJSON(content(response, "text"))
artist.id <- artist.info$artists$items$id[1]
artist.id <- artist.info$artists$items$id
resource <- paste0("/v1/artists/", id,"/top-tracks")
library(httr)
library(jsonlite)
library(httr)
base.uri <- "https://api.spotify.com"
resource <- "/v1/search"
uri = paste0(base.uri, resource)
query.params <- list(q = "Beyonce", type = "artist")
response <- GET(uri, query = query.params)
artist.info <- fromJSON(content(response, "text"))
base.uri <- "https://api.spotify.com"
TopTrackSearch <- function(artist) {
# Artist info
resource <- "/v1/search"
uri = paste0(base.uri, resource)
query.params <- list(q = artist, type = "artist")
response <- GET(uri, query = query.params)
artist.info <- fromJSON(content(response, "text"))
artist.id <- artist.info$artists$items$id[1]
# Get albums
resource <- paste0("/v1/artists/",artist.id,"/top-tracks")
uri = paste0(base.uri, resource)
query.params <- list(country="US")
response <- GET(uri, query = query.params)
top.tracks <- fromJSON(content(response, "text"))
return(top.tracks$tracks)
}
top.tracks <- TopTrackSearch('Beyonce')
SwapSpaces <- function(str, rep="%20"){
return(gsub(" ",rep,str))
}
GetYouTubeVideoID <- function(video.search){
# YouTube api key
api.key = 'AIzaSyC5B_muf0KvmTYaGKAsOm0VHQ-VpTGIZik'
# API endpoint for YouTube api
base.url = 'https://www.googleapis.com/youtube/v3'
# Replace spaces in video.search with '%20'
formatted.video.search = SwapSpaces(video.search)
# Create API request url
search = paste0(base.url,
"/search?part=snippet&q=",
formatted.video.search,
"&type=video&key=",
api.key)
# Make API request to get video data
data <- fromJSON(search)
# Get the id of the first video. This will be passed to an HTML <iframe> object for embedding.
video.id <- data$items$id$videoId[[1]]
return(video.id)
}
api.key = 'AIzaSyC5B_muf0KvmTYaGKAsOm0VHQ-VpTGIZik'
base.url = 'https://www.googleapis.com/youtube/v3'
formatted.video.search = SwapSpaces(video.search)
formatted.video.search = SwapSpaces("katy")
search = paste0(base.url,
"/search?part=snippet&q=",
formatted.video.search,
"&type=video&key=",
api.key)
data <- fromJSON(search)
View(data$items)
formatted.video.search = SwapSpaces("justin")
search = paste0(base.url,
"/search?part=snippet&q=",
formatted.video.search,
"&type=video&key=",
api.key)
data <- fromJSON(search)
View(data$items)
formatted.video.search = SwapSpaces("justin beiber")
search = paste0(base.url,
"/search?part=snippet&q=",
formatted.video.search,
"&type=video&key=",
api.key)
data <- fromJSON(search)
View(data$items)
formatted.video.search = SwapSpaces("justin beiber despacito")
search = paste0(base.url,
"/search?part=snippet&q=",
formatted.video.search,
"&type=video&key=",
api.key)
data <- fromJSON(search)
View(data$items)
>>>>>>> changes
