plot(Altitude$Pressure, Altitude$BP)
fit<-with(Altitude,lm(BP~Pressure))
abline(fit)
with(Altitude,plot(Pressure,BP))
altitude$BP
lines(predict(with(Altitude,lm(BP~Pressure+Pressure^2))))
lines(predict(with(Altitude,lm(BP~Pressure+I(Pressure^2)))))
lines(predict(with(Altitude,lm(BP~Pressure+Pressure^2))))
predict(with(Altitude,lm(BP~Pressure+Pressure^2)))
lines(predict(with(Altitude,lm(BP~Pressure+Pressure^2))))
points(predict(with(Altitude,lm(BP~Pressure+Pressure^2))))
m<-lm(BP~Pressure+I(Pressure^2),data=Altitude)
m
lines(Altitude$BP,predict(m))
lines(Altitude$BP,predict(m))
summary(m)
lines(predict(m))
predict(m)
lines(predict(m),Altitude$BP)
lines(predict(m),Altitude$BP)
lines(predict(m),Altitude$BP)
plot(Altitude$Pressure, Altitude$BP)
fit<-with(Altitude,lm(BP~Pressure))
lines(predict(m))
predict(m)
summary(fit)
plot(Altitude$Pressure, Altitude$BP)
fit<-with(Altitude,lm(BP~Pressure))
abline(fit)
m<-lm(BP~Pressure+I(Pressure^2),data=Altitude)
View(Altitude)
?curve
curve(m)
x<-(1:10)
y<-(300:310)
x<-(1:11)
lm(y~x+I(x^2))
lm(y~x+(x^2))
lm(y~x+I(x^2))
plot(x,y)
curve(lm(y~x+I(x^2)))
m<-lm(BP~Pressure+I(Pressure^2),data=Altitude)
with(Altitude,plot(Pressure,BP))
lines(Altitude$Pressure, fitted(m), col='red', type='b')
m<-lm(BP~Pressure+I(Pressure^2),data=Altitude)
with(Altitude,plot(Pressure,BP))
lines(Altitude$Pressure, fitted(m), col='red', type='b')
?abline
range(10)
seq(10)
max(10,1000)
10%3
10%%3
sample(5)
sample(5,10)
sample(50,5)
# a2-foundational-skills
# Set up and Defining variables -----------------------------------------------------------------
# Install and load the the `stringr` package, which has a variety of built in functions that make working with string variables easier.
install.packages("stringr")
library(stringr)
# Create a numeric variable `my.age` that is equal to your age
my.age<-20
# Create a variable `my.name` that is equal to your first name
my.name<-"Yuting"
# Using multiplication, create a variable `minutes.in.a.day` that is equal to the number of minutes in a day
minutes.in.a.day<-60*24
# Using multiplication, create a variable `hours.in.a.year` that is the number of hours in a year
hours.in.a.year<-24*365
# Create a variable `more.minutes.than.hours` that is a boolean value (TRUE/FALSE)
# It should be TRUE if there are more minutes in a day than hours in a year, otherwise FALSE
more.minutes.than.hour<-minutes.in.a.day>hours.in.a.year
# Working with functions ----------------------------------------------------------
# Write a function called `MakeIntroduction` that takes in two arguments: name, and age.
# This function should return a string value that says "Hello, my name is {name}, and I'm {age} years old".
MakeIntroduction<-function(name,age){
statement<-paste("Hello, my name is", name, ", and I'm", age,"years old.")
return(statement)
}
# Create a variable `my.intro` by passing your variables `my.name` and `my.age` into your `MakeIntroduction` function
my.intro<-MakeIntroduction(my.name,my.age)
# Create a variable `casual.intro` by substituting "Hello, my name is ", with "Hey, I'm" in your `my.intro` variable
casual.intro<- gsub("Hello, my name is","Hey, I'm",my.intro)
# Create a new variable `loud.intro`, which is your `my.intro` variable in all upper-case letters
loud.intro<-toupper(my.intro)
# Create a new variable `quiet.intro`, which is your `my.intro` variable in all lower-case letters
quiet.intro<-tolower(my.intro)
# Create a new variable capitalized, which is your `my.intro` variable with each word capitalized
# hint: use the stringr function `str_to_title`
capitalized<- str_to_title(my.intro)
# Using the `str_count` function, create a variable `occurrences` that stores the # of times the letter "e" appears in `my.intro`
occurrences<- str_count(my.intro, "e")
# Write another function `Double` that takes in a variable and returns that variable times two
Double<-function(n){
return(n*2)
}
# Using your `Double` function, create a variable `minutes.in.two.days`, which is the number of minutes in two days
minutes.in.two.day<-Double(minutes.in.a.day)
# Write another function `ThirdPower` that takes in a value and returns that value cubed
ThirdPower<-function(n){
return(n^3)
}
# Create a variable `twenty.seven`` by passing the number 3 to your `ThirdPower` function
twenty.seven<- ThirdPower(3)
# Vectors ----------------------------------------------------------------------
# Create a vector `movies` that contains the names of six movies you like
movies<-c("Beauty and the Beast","Your Name","Inception","John Wick","Final Destination","Unstoppable")
# Create a vector `top.three` that only contains the first three movies in the vector
top.three<-movies[1:3]
# Using your vector and the paste method, create a vector `excited` that adds the phrase -
# " is a great movie!" to the end of each element in your movies vector
excited<-paste(movies, "is a great movie!")
# Create a vector `without.four` that has your first three movies, and your 5th and 6th movies.
without.four<-movies[-4]
# Create a vector `numbers` that is the numbers 700 through 999
numbers<-c(700:999)
# Using the built in length function, create a variable `len` that is equal to the length of your vector `numbers`
len<- length(numbers)
# Using the `mean` function, create a variable `numbers.mean` that is the mean of your vector `numbers`
numbers.mean<-mean(numbers)
# Using the `median` function, create a variable `numbers.median` that is the mean of your vector `numbers`
numbers.median<-median(numbers)
# Create a vector `lower.numbers` that is the numbers 500:699
lower.numbers<-c(500:699)
# Create a vector `all.numbers` that combines your `lower.numbers` and `numbers` vectors
all.numbers<-c(lower.numbers,numbers)
# Dates ----------------------------------------------------------------------------
# Use the `as.Date()` function to create a variable `today` that represents today's date
# You can pass in a character string of the day you wrote this, or you can get the current date
# Hint: https://www.rdocumentation.org/packages/base/versions/3.3.2/topics/Sys.time
today<-as.Date("2017/4/5")
# Create a variable `summer.break` that represents the first day of Summer break (June 9, 2017).
# Make sure to use the `as.Date` function again
summer.break<-as.Date("2017/6/9")
# Create a variable `days.to.break` that is how many days until break (hint: subtract the dates!)
day.to.break<-summer.break-today
# Define a function called `MakeBirthdayIntro` that takes in three arguments:
# a name, an age, and a character string for an upcoming birthday.
# This method should return a character string of the format:
#  "Hello, my name is {name} and I'm {age} years old. In {N} days I'll be {new.age}"
# You should utilize your `MakeIntroduction()` function from Part 1!
MakeBirthdayIntro<-function(name,age,bd){
next.bd<-as.POSIXlt(bd)
next.bd$year<-next.bd$year+age+1
days.to.bd<-as.Date(next.bd)-Sys.Date()
statement<-paste(my.intro,"In",days.to.bd,"days I'll be",age+1)
return(statement)
}
# Create a variable `my.bday.intro` by calling your `MakeBirthdayIntro` function and passing in `my.name`, `my.age`, and your birthday.
my.bday.intro<-MakeBirthdayIntro(my.name,my.age,"1997/01/19")
# Challenge ------------------------------------------------------------------
# Write a function `RemoveDigits` that will remove all digits (i.e., 0 through 9) from all elements in a *vector of strings*.
RemoveDigits<-function(s){
s<-gsub("\\d", "", s)
return(s)
}
# Demonstrate that your approach is successful by passing a vector of courses to your function
# For example, RemoveDigits(c("INFO 201", "CSE 142"))
RemoveDigits(c("INFO 201", "CSE 142"))
MakeBirthdayIntro("Eric",18,"1997/1/20")
MakeBirthdayIntro<-function(name,age,bd){
next.bd<-as.POSIXlt(bd)
next.bd$year<-next.bd$year+age+1
days.to.bd<-as.Date(next.bd)-Sys.Date()-1
statement<-paste(MakeIntroduction(name,age),"In",days.to.bd,"days I'll be",age+1)
return(statement)
}
MakeBirthdayIntro("Eric",18,"1997/1/20")
MakeBirthdayIntro("Eric",18,"1998/1/20")
MakeBirthdayIntro("Eric",18,"1999/1/20")
letterCloud(demoFreq, word = "LOVE", color="mistyrose",backgroundColor="lightcoral")
library(wordcloud2)
head(demoFreq)
letterCloud(demoFreq, word = "LOVE", color="mistyrose",backgroundColor="lightcoral")
library(dplyr)
mtcars %>% View()
library(nycflights13)
library(dplyr)
new.data<-flights %>% group_by(month) %>% summarise(mean=mean(dep_delay,na.rm=TRUE))
plot(new.data)
View(flights)
de.airport<-flights %>% group_by(dest) %>% summarise(mean=mean(arr_delay))
de.airport<-flights %>% group_by(dest) %>% summarise(mean=mean(arr_delay)) %>% filter(mean==max(mean))
de.airport
View(de.airport)
de.airport<-flights %>% group_by(dest) %>% summarise(mean=mean(arr_delay, na.rm=TRUE)) %>% filter(mean==max(mean))
View(de.airport)
de.airport<-flights %>% group_by(dest) %>% summarise(mean=mean(arr_delay, na.rm=TRUE))
View(de.airport)
de.airport<-flights %>% group_by(dest) %>% summarise(mean=mean(arr_delay, na.rm=TRUE)) %>% filter(mean==max(mean))
de.airport<-flights %>% group_by(dest) %>% summarise(mean=mean(arr_delay, na.rm=TRUE)) %>% arrange(mean)
View(de.airport)
id.list<-list("J000298","M001111","C000127")
committeeInfo<-function(id){
committee.resource <- "/committees?member_ids="
committee.url<- paste0(base.url,committee.resource,id)
committee.response <- GET(committee.url)
committee.res<- fromJSON(content(committee.response,"text"))$results %>% flatten() %>% mutate(member_id=id)
return(committee.res)
}
committee.data<-bind_rows(lapply(id.list,committeeInfo))
memberInfo<-function(id){
member.resource<-"/legislators?bioguide_id="
member.url <- paste0(base.url, member.resource,id)
member.response<-GET(member.url)
member.res<-fromJSON(content(member.response,"text"))$results %>% flatten()
return(member.res)
}
member.data<-bind_rows(lapply(id.list,memberInfo))
all.data<-left_join(member.data, committee.data, by=c("bioguide_id"="member_id")) %>%
group_by(first_name,last_name) %>% summarise(count=n()) %>% arrange(count)
library(httr)
library(jsonlite)
library(dplyr)
library(knitr)
id.list<-list("J000298","M001111","C000127")
committeeInfo<-function(id){
committee.resource <- "/committees?member_ids="
committee.url<- paste0(base.url,committee.resource,id)
committee.response <- GET(committee.url)
committee.res<- fromJSON(content(committee.response,"text"))$results %>% flatten() %>% mutate(member_id=id)
return(committee.res)
}
committee.data<-bind_rows(lapply(id.list,committeeInfo))
memberInfo<-function(id){
member.resource<-"/legislators?bioguide_id="
member.url <- paste0(base.url, member.resource,id)
member.response<-GET(member.url)
member.res<-fromJSON(content(member.response,"text"))$results %>% flatten()
return(member.res)
}
member.data<-bind_rows(lapply(id.list,memberInfo))
all.data<-left_join(member.data, committee.data, by=c("bioguide_id"="member_id")) %>%
group_by(first_name,last_name) %>% summarise(count=n()) %>% arrange(count)
---
title: "index"
author: "Yuting Chiu"
date: "4/29/2017"
output: html_document
---
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```
```{r warning=FALSE, message=FALSE}
library(httr)
library(jsonlite)
library(dplyr)
library(knitr)
```
```{r}
base.url <-"https://congress.api.sunlightfoundation.com"
resource <-"/districts/locate?zip="
zip <- "98105"
uri.full <- paste0(base.url,resource,zip)
response <- GET(uri.full)
result <- fromJSON(content(response,"text"))$results %>% flatten()
district.num<-result$district
```
The district number for zipcode `r zip` is `r district.num`
```{r}
legislator.resource <- "/legislators/locate?zip="
legislator.uri<- paste0(base.url,legislator.resource,zip)
legislator.response<-GET(legislator.uri)
legislator.res<- fromJSON(content(legislator.response,"text"))$results %>% flatten()
legislator.res<-legislator.res %>%
mutate(link=paste0("[link](",website,")")) %>%
mutate(twitter=paste0("[link](http://twitter.com/",twitter_id,")"))%>%
select(first_name,last_name,title, party, chamber, phone, link, twitter)
kable(legislator.res, col.names = c("First Name", "Last Name","Title","Party","Chamber","Phone","Website","Twitter"))
```
```{r}
id.list<-list("J000298","M001111","C000127")
committeeInfo<-function(id){
committee.resource <- "/committees?member_ids="
committee.url<- paste0(base.url,committee.resource,id)
committee.response <- GET(committee.url)
committee.res<- fromJSON(content(committee.response,"text"))$results %>% flatten() %>% mutate(member_id=id)
return(committee.res)
}
committee.data<-bind_rows(lapply(id.list,committeeInfo))
memberInfo<-function(id){
member.resource<-"/legislators?bioguide_id="
member.url <- paste0(base.url, member.resource,id)
member.response<-GET(member.url)
member.res<-fromJSON(content(member.response,"text"))$results %>% flatten()
return(member.res)
}
member.data<-bind_rows(lapply(id.list,memberInfo))
all.data<-left_join(member.data, committee.data, by=c("bioguide_id"="member_id")) %>%
group_by(first_name,last_name) %>% summarise(count=n()) %>% arrange(count)
par(mar=c(5,8,2,2))
barplot(all.data$count, horiz = TRUE,las=1,main="Committees Served on by Each Rep.",xlab="#Committess",names.arg = paste(all.data$first_name,all.data$last_name))
```
```{r}
```
View(all.data)
View(committee.data)
View(all.data)
View(legislator.res)
committee.data2<-committee.data %>% filter(subcommittee==FALSE)
View(committee.data2)
selected.committe<-committee.data2[1,]
View(selected.committe)
committee.id<-committee.data2$committee_id[1]
committee.member.resource <-"/committees?committee_id=SSAP&fields=members"
committee.member.url <- paste0(base.url,"/committees?committee_id=",committee.id,"&fields=members")
committee.member.response <- GET(committee.member.url)
body <- fromJSON(content(committee.member.response,"text"))$results$members[[1]] %>% flatten()
View(body)
chair<-body %>% filter(title=="Chair") %>% select(legislator.first_name, legislator.last_name)
chair
total.memeber<- body %>% count()
total.memeber
committee.rep<-committee.data2$member_id[1]
rep.side<-body %>% filter(legislator.bioguide_id)
rep.side<-body %>% filter(legislator.bioguide_id==committee.rep)
View(rep.side)
rep.side<-body %>% filter(legislator.bioguide_id==committee.rep) %>% select(side)
View(rep.side)
View(all.data)
gender<-body %>% group_by(legislator.gender)
View(gender)
gender<-body %>% group_by(legislator.gender) %>% summarise(count=n())
View(gender)
male.dist<-gender[legislator.gender=='M']/total.memeber
male.dist<-gender$legislator.gender='M'/total.memeber
male.dist<-gender %>% filter(legislator.gender=='M')/total.memeber
gender$count[legislator.gender]
gender$legislator.gender
gender$legislator.gender="M"
gender['M','count']
gender<-body %>% group_by(legislator.gender) %>% summarise(count=n())
gender$legislator.gender['M',count]
gender$legislator.gender['M','count']
gender['M','count']
gender[1,2]
gender[legislator.gender='M',2]
gender[legislator.gender=='M',2]
gender['M',2]
gender[gender$legislator.gender == M]
gender[gender$legislator.gender == "M"]
gender[gender$legislator.gender == "M",]
gender[gender$legislator.gender == "M",'count']
total.member<- body %>% count()
chair<-body %>% filter(title=="Chair") %>% select(legislator.first_name, legislator.last_name)
total.member<- body %>% count()
rep.side<-body %>% filter(legislator.bioguide_id==committee.rep) %>% select(side)
male.dist<- round((gender[gender$legislator.gender == "M",'count']/total.member),2)
female.dist<-round((gender[gender$legislator.gender == "F",'count']/total.member),2)
gender<- body %>% group_by(legislator.gender) %>% summarise(count=n())
#convert the gender protion to percentage
none.subcommittee.data<-committee.data %>% filter(subcommittee==FALSE)
committee.id<-none.subcommittee.data$committee_id[1]
committee.rep<-none.subcommittee.data$member_id[1]
getAPI<-function(source,var){
base.url <-"https://congress.api.sunlightfoundation.com"
url.full<-paste0(base.url,source,var)
res<-GET(url.full)
final<-fromJSON(content(res,"text"))$results %>% flatten()
return(final)
}
yo<-getAPI("/districts/locate?zip=","98105")
View(yo)
yo2<-getAPI("/legislators/locate?zip=","98105")
View(yo2)
View(legislator.res)
hello<-getAPI("/committees?member_ids=",id.list)
zip<-"98105"
district.data<-getAPI("/districts/locate?zip=",zip)
district.num<-district.data$district
district.num
base.url <-"https://congress.api.sunlightfoundation.com"
com<-function(ids){
getAPI("/committees?member_ids=",ids)
}
getAPI("/committees?member_ids=",id.list)
base.url <-"https://congress.api.sunlightfoundation.com"
#reduce the redundancy of getting APIs for many times, so write it as a function
getAPI<-function(resource,var){
url.full<-paste0(base.url,resource,var)
res<-GET(url.full)
final<-fromJSON(content(res,"text"))$results %>% flatten()
return(final)
}
View(none.subcommittee.data)
cereal<-read.csv("/Users/CindyChiu/info201/a8-building-apps-chiuyt19/data/cereal.tsv",sep="\t",stringsAsFactors = FALSE,na.strings = "-1" )
library(ggplot2)
library(plotly)
BuildScatter(cereal,"fat","calories","mfr")
p<-ggplot(cereal,aes(x=fat,y=calories,color=mfr))+geom_point(na.rm=FALSE)+geom_count()
p<-ggplotly(p)
p
BuildScatter<-function(data,scatter.x,scatter.y,scatter.color){
p<-ggplot(data,aes_string(x=scatter.x,y=scatter.y,color=scatter.color))+geom_point(na.rm=FALSE)+geom_count()
p<-ggplotly(p)
return(p)
}
BuildScatter(cereal,"fat","calories","mfr")
shiny::runApp('info201/a8-building-apps-chiuyt19')
ggplot(cereal,aes(x=fat,y=calories,color=mfr))+geom_point(na.rm=FALSE)+geom_count()+ylim(100,160)
ggplot(cereal,aes(x=fat,y=calories,color=mfr))+geom_point(na.rm=FALSE)+geom_count()+ylim(0,160)
p<-ggplotly(p)
ggplot(cereal,aes(x=fat,y=calories,color=mfr))+geom_point(na.rm=FALSE)+geom_count()+ylim(0,100)
ggplot(cereal,aes(x=fat,y=calories,color=mfr))+geom_point(na.rm=FALSE)+geom_count()+ylim(0,160)
p<-ggplotly(p)
p<-ggplot(cereal,aes(x=fat,y=calories,color=mfr))+geom_point(na.rm=FALSE)+geom_count()+ylim(0,160)
p<-ggplotly(p)
p
BuildScatter<-function(data,scatter.x,scatter.y,scatter.color,max,min){
p<-ggplot(data,aes_string(x=scatter.x,y=scatter.y,color=scatter.color))+geom_point(na.rm=FALSE)+geom_count()+ylim(min,max)
p<-ggplotly(p)
return(p)
}
BuildScatter(cereal,"fat","calories","mfr",0,120)
BuildScatter<-function(data,scatter.x,scatter.y,scatter.color,min,max){
p<-ggplot(data,aes_string(x=scatter.x,y=scatter.y,color=scatter.color))+geom_point(na.rm=FALSE)+geom_count()+ylim(min,max)
p<-ggplotly(p)
return(p)
}
BuildScatter(cereal,"fat","calories","mfr",0,120)
View(cereal)
BuildScatter<-function(data,scatter.x,scatter.y,scatter.color,max){
p<-ggplot(data,aes_string(x=scatter.x,y=scatter.y,color=scatter.color))+geom_point(na.rm=FALSE)+geom_count()+ylim(0,max)
p<-ggplotly(p)
return(p)
}
BuildScatter(cereal,"fat","calories","mfr",120)
runApp('info201/a8-building-apps-chiuyt19')
runApp('info201/a8-building-apps-chiuyt19')
runApp('info201/a8-building-apps-chiuyt19')
input$slider
install.packages('rsconnect')
install.packages("rsconnect")
install.packages("rsconnect")
install.packages('rsconnect')
install.packages("dplyr")
install.packages("plotly")
install.packages("ggplot2")
install.packages("shiny")
library(jsonlite)
library(httr)
install.packages("janeaustenr")
install.packages("tidytext")
library(janeaustenr)
library(tidytext)
library(dplyr)
library(stringr)
library(ggplot2)
austen_books()
books<-austen_books()
View(books)
books %>% group_by(book) %>% summarise(count=n())
num.book<-books %>% group_by(book) %>% summarise(count=n())
View(num.book)
nrow(num.book)
most.line.book<-num.book %>% filter(count==max(count))
most.line.book
unnest_tokens(books)
unnest_tokens(books$text)
unnest_tokens(text)
unnest_tokens()
?unnest_tokens
unnest_tokens(books,words,text)
update<-unnest_tokens(books,words,text)
View(update)
most.common<-update %>% filter(words=max(words))
most.common<-update %>% filter(words==max(words))
most.common
most.common<-update %>% group_by(words) %>% filter(words==max(words))
most.common
most.common<-update %>% group_by(words) %>% summarise(count=n()) %>% filter(count==max(count))
most.common
View(stop_words)
?anti_join
no.stop<-anti_join(update,stop_words,by=c("words","word"))
no.stop<-anti_join(update,stop_words,by=c(words,word))
no.stop<-anti_join(update,stop_words,words,word))
no.stop<-anti_join(update,stop_words,words,word)
no.stop<-anti_join(update,stop_words,by=c("words"="word"))
View(no.stop)
most.common<-update %>% group_by(words) %>% summarise(count=n())
View(most.common)
most.common<-update %>% group_by(words) %>% summarise(count=n()) %>% filter(count==max(count))
View(most.common)
no.stop %>% group_by(words) %>% summarise(count=n()) %>% filter(count==max(count))
?geom_bar
ggplot(no.stop)+geom_bar(mapping=aes(x=words))
install.packages(rvest)
install.packages('rvest')
library(tidytext)
library(dplyr)
library(stringr)
library(ggplot2)
web<-read_html("https://www.washington.edu/students/crscat/info.html")
library(rvest)
web<-read_html("https://www.washington.edu/students/crscat/info.html")
title<-web %>% html_node('p b') %>% html_text()
des<-web %>% html_node('p') %>% html_text()
titles<-web %>% html_node('p b') %>% html_text()
classes <- data.frame(title = titles, description = des[2:length(des)], stringsAsFactors = FALSE)
View(classes)
# Extract descriptions of each course into a dataframe (may take multiple steps)
titles<-web %>% html_nodes('p b') %>% html_text()
des<-web %>% html_nodes('p') %>% html_text()
classes <- data.frame(title = titles, description = des[2:length(des)], stringsAsFactors = FALSE)
View(classes)
nrow(classes)
class.words<-unnest_tokens(classes,words,description)
View(class.words)
library(httr)
library(jsonlite)
setwd("~/info201/project-ae4")
